basePath: /
definitions:
  entity.UserDiary:
    properties:
      bodyText:
        type: string
      createdAt:
        type: string
      datePost:
        type: string
      deletedAt:
        type: string
      id:
        type: integer
      title:
        type: string
      updatedAt:
        type: string
      userId:
        type: integer
    type: object
  models.ReqCreateDiary:
    properties:
      bodyText:
        type: string
      datePost:
        type: string
      title:
        type: string
    type: object
  models.ReqUpdateDiary:
    properties:
      bodyText:
        type: string
      datePost:
        type: string
      title:
        type: string
    type: object
  models.ReqUserLogin:
    properties:
      deviceID:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - deviceID
    - password
    - username
    type: object
  models.ReqUserRegister:
    properties:
      birthday:
        type: string
      email:
        type: string
      fullname:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - birthday
    - email
    - fullname
    - password
    - username
    type: object
  models.ResponseErrors:
    properties:
      error:
        $ref: '#/definitions/models.errorResponse'
    type: object
  models.ResponseSuccess:
    properties:
      data:
        type: object
    type: object
  models.errorResponse:
    properties:
      code:
        type: integer
      message:
        type: string
    type: object
host: localhost:3000
info:
  contact:
    email: fiber@swagger.io
    name: API Support
  description: This is a sample swagger for Fiber
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Fiber TapTalk Diary API
  version: "1.0"
paths:
  /api/v1/diary/{id}:
    get:
      operationId: GetDiaryById
      responses:
        "200":
          description: entity.UserDiary
          schema:
            $ref: '#/definitions/entity.UserDiary'
        "401":
          description: 'code: 401, message: "Username or password not valid, please
            try again" '
          schema:
            $ref: '#/definitions/models.ResponseErrors'
        "422":
          description: 'code: 422, message: "Invalid request" '
          schema:
            $ref: '#/definitions/models.ResponseErrors'
      security:
      - Token: []
      summary: Get Diary By Id
      tags:
      - Diaries
  /api/v1/diary/create:
    post:
      operationId: CreateDiary
      parameters:
      - description: 'all fields mandatory. for datePost (ex: DD-MM-YYYY)'
        in: body
        name: create
        required: true
        schema:
          $ref: '#/definitions/models.ReqCreateDiary'
      responses:
        "200":
          description: Diary Successfully Created
          schema:
            $ref: '#/definitions/models.ResponseSuccess'
        "401":
          description: 'code: 401, message: "JWT Token is not valid" '
          schema:
            $ref: '#/definitions/models.ResponseErrors'
        "422":
          description: 'code: 422, message: "Invalid request" '
          schema:
            $ref: '#/definitions/models.ResponseErrors'
      security:
      - Token: []
      summary: Create Diary
      tags:
      - Diaries
  /api/v1/diary/delete/{id}:
    delete:
      operationId: DeleteDiary
      parameters:
      - description: Diary ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: 'Diary Successfully Deleted" '
          schema:
            $ref: '#/definitions/models.ResponseSuccess'
        "401":
          description: 'code: 401, message: "Username or password not valid, please
            try again" '
          schema:
            $ref: '#/definitions/models.ResponseErrors'
        "422":
          description: 'code: 422, message: "Invalid request" '
          schema:
            $ref: '#/definitions/models.ResponseErrors'
      security:
      - Token: []
      summary: Delete Diary
      tags:
      - Diaries
  /api/v1/diary/listall:
    get:
      operationId: ListAllDiaries
      parameters:
      - description: ' '
        in: query
        name: page
        type: string
      - description: ' '
        in: query
        name: limit
        type: string
      - description: year of posted diaries
        in: query
        name: year
        required: true
        type: string
      - description: 'Quarter of diaries: ex (1 : January - March, 2: April - June,
          3: July - September, 4: October - December)'
        in: query
        name: quarter
        required: true
        type: string
      responses:
        "200":
          description: models.Pagination
          schema:
            $ref: '#/definitions/models.ResponseSuccess'
        "401":
          description: 'code: 401, message: "Username or password not valid, please
            try again" '
          schema:
            $ref: '#/definitions/models.ResponseErrors'
        "422":
          description: 'code: 422, message: "Invalid request" '
          schema:
            $ref: '#/definitions/models.ResponseErrors'
      security:
      - Token: []
      summary: List All Diaries
      tags:
      - Diaries
  /api/v1/diary/update/{id}:
    put:
      operationId: UpdateDiary
      parameters:
      - description: Diary ID
        in: path
        name: id
        required: true
        type: integer
      - description: 'all fields mandatory. for datePost (ex: DD-MM-YYYY)'
        in: body
        name: update
        required: true
        schema:
          $ref: '#/definitions/models.ReqUpdateDiary'
      responses:
        "200":
          description: Diary Successfully Updated
          schema:
            $ref: '#/definitions/models.ResponseSuccess'
        "401":
          description: 'code: 401, message: "Invalid ID" '
          schema:
            $ref: '#/definitions/models.ResponseErrors'
        "422":
          description: 'code: 422, message: "Invalid request" '
          schema:
            $ref: '#/definitions/models.ResponseErrors'
      security:
      - Token: []
      summary: Update Diary
      tags:
      - Diaries
  /api/v1/getcurrentdeviceid:
    get:
      operationId: Get Current Device ID
      responses:
        "200":
          description: exampledeviceid
          schema:
            $ref: '#/definitions/models.ResponseSuccess'
        "401":
          description: 'code: 401, message: "device ID not found" '
          schema:
            $ref: '#/definitions/models.ResponseErrors'
        "422":
          description: 'code: 422, message: "Invalid request" '
          schema:
            $ref: '#/definitions/models.ResponseErrors'
      security:
      - Token: []
      summary: Get Current Device ID
      tags:
      - User
  /api/v1/login:
    post:
      operationId: LoginUser
      parameters:
      - description: all fields mandatory
        in: body
        name: login
        required: true
        schema:
          $ref: '#/definitions/models.ReqUserLogin'
      responses:
        "200":
          description: 'token: "exampletokenresponse" '
          schema:
            $ref: '#/definitions/models.ResponseSuccess'
        "401":
          description: 'code: 401, message: "Username or password not valid, please
            try again" '
          schema:
            $ref: '#/definitions/models.ResponseErrors'
        "422":
          description: 'code: 422, message: "Invalid request" '
          schema:
            $ref: '#/definitions/models.ResponseErrors'
      summary: Login User
      tags:
      - User
  /api/v1/register:
    post:
      operationId: RegisterUser
      parameters:
      - description: 'all fields mandatory. ex: (Birthday format DD-MM-YYYY)'
        in: body
        name: register
        required: true
        schema:
          $ref: '#/definitions/models.ReqUserRegister'
      responses:
        "200":
          description: 'token: "User Successfully Registered" '
          schema:
            $ref: '#/definitions/models.ResponseSuccess'
        "401":
          description: 'code: 401, message: "Invalid Email Format" '
          schema:
            $ref: '#/definitions/models.ResponseErrors'
        "422":
          description: 'code: 422, message: "Invalid request" '
          schema:
            $ref: '#/definitions/models.ResponseErrors'
      summary: Register User
      tags:
      - User
schemes:
- http
securityDefinitions:
  Token:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
